<%= partial( "header" ) %>

<h2>Dynamic Costs for Configuration</h2>
<table spacing=20>
<tr>
<td>
<a href=/configs/edit_daily>Edit Weekday Usage Model</a><br />
<a href=/configs>Add Instance Configuration</a><br />
</td>
<td>
<%= partial("monthly_config") %>
</td>
</tr>
</table>

<%
# holy fuck this is ugly
od_project_cost = 0.0
ri_optimized_project_cost = 0.0
od_no_scale_project_cost = 0.0
od_weekly_cost = 0.0
ri_optimized_weekly_cost = 0.0
total_ri_upfront = 0.0
minimum_ri_month1 = 0.0
count_ri_month1 = 0
puts "select * from dynamic_usage_configs where ItemName() like '#{@index_name}%'"
list = @sdb.select("select * from dynamic_usage_configs where ItemName() like '#{@index_name}%'")
%>Found <%= list[:items].size %> Configurations <%
for item in list[:items]
	config_ary = item.values
	config_key = item.keys.to_s
	config = {}
	# TODO: fix this ugly hack, and fix tabbin
	for h in config_ary
		for key in h.keys
			value = h[key]		
			#puts "key: #{key} #{key.class} valaue: #{value} #{value.class}"
			config[key.to_sym] = value.to_s
		end
	end
	puts "displaying Config: #{config_key}"
	#puts "Class: #{item.class} #{config["type"]} $"
	#config = @dy.new_config("foo")

ami_types = @dy.get_types
puts "TYPE!!!!! #{config[:type]} CLASS: #{config[:type].class}"
ami_type = ami_types[config[:type].to_sym]
daily_matrix,min,max = @dy.calc_daily_matrix(config)
minimum_ri_month1 += min.to_i * ami_type[:RI_y1_install].to_f
count_ri_month1 += min.to_i
total_instance_hours_per_week = @dy.calc_total_weekly_hours(daily_matrix,config)
optimal_RIs = @dy.calc_optimal_ri(config)
weekly_optimized_cost,riop = @dy.calc_ri_optimized_price(optimal_RIs,daily_matrix,config)
ri_optimized_weekly_cost += weekly_optimized_cost
%>
<br />
Optimal Reserved Instances: <%= optimal_RIs %><br />
<table border=1>
<tr>
<center><th><a href=<%= URI.escape("/configs/edit_config?config_key=#{config_key}") %>><%= config[:name] %></a></th></center></tr>
<tr>
<th> Hour: </th>
<%
for hour in daily_matrix.keys.sort
	%><th><%=hour%></th><%
end
%>
<th>Total</th>
<th>RI 1 Year Up Front Cost</th>
<th>Total Annual Cost</th>
</tr>
<tr>
<th>Number of Instances</th>
<%
count = 0
for key in daily_matrix.keys.sort
	iu = daily_matrix[key]
	noi = iu[:number_of_instances]
	usage = iu[:usage]
	%><td><%=noi%></td><%
	count += noi.to_i
end
%>
<td><%=count%></td></tr>
<th>On Demand Price $<%= ami_type[:OD_hourly].to_f %></th>
<%
count = 0.0
ri_one_year = 0.0
for key in daily_matrix.keys.sort
        iu = daily_matrix[key]
        noi = iu[:number_of_instances]
        od_price = noi.to_i * ami_type[:OD_hourly].to_f
	#puts "OD Price = NOI: #{noi} OD_hourly #{ ami_type[:OD_hourly].to_f}  $"
        %><td><%=od_price%></td><%
        count += od_price.to_f
end
od_no_scale_project_cost += max.to_f * ami_type[:OD_hourly].to_f*24*365
od_project_cost += count * 365
%>
<td><%=count%></td>
<td>$0.00</td><td><%= count * 365 %></td>
</tr>
<th>RI Optimized Price</th>
<%
count = 0.0
for hour in riop.keys.sort
	rio_price = riop[hour]
        %><td><%=rio_price%></td><%
        count += rio_price.to_f
end
ri_one_year = ami_type[:RI_y1_install].to_f * optimal_RIs.to_f
total_ri_upfront += ri_one_year
ri_optimized_project_cost +=  ri_one_year + (count.to_f * 365)
%>
<td><%=count%></td>
<td><%= ri_one_year %></td><td><%= (count.to_f * 365) + ri_one_year %></td>
</tr>
</table>
<%
end
%>
<h1>Totals with no Monthly Scaling</h1>
Total Unoptimized cost: <%= od_no_scale_project_cost %><br />
Total Auto Scaling Unoptimized cost: <%= od_project_cost %><br />
Total Optimized cost: <%= ri_optimized_project_cost %><br />
Total Savings for RI Optimization and Auto Scaling: <%= od_no_scale_project_cost.to_f - ri_optimized_project_cost.to_f%><br />
Total RI Upfront Payment: <%= total_ri_upfront %><br />
<br>
<h2>Monthly Spend, including RI purchases when utilization requries more RI purchases</h2>
<table border=1 padding=1>
<tr>
<th>Month:</th>
<%
for i in 1..@months.to_i
	%>
	<td><%= i %></td>
	<%
end
%>
</tr>
<tr>
<th>Usaage:</th>
<%
growth = 0.0
for i in 1..@months.to_i
	if (i == 1)
		%>
		<td><%= @month_start_percentage %></td>
		<%
		growth = @month_start_percentage.to_f
	else
		#growth <= 1 ? growth += @month_growth_percentage.to_f : growth = 1
		# makek sure we dont' grow past 100%
		test = growth +(growth* @month_growth_percentage.to_f)
                test >= 1 ?  growth = 1 : growth = test
        	%><td><%= growth %></td><%
	end
end
%>
</tr>
<th>Cost<hr />RI Purchases</th>
<%
monthly = (ri_optimized_project_cost - total_ri_upfront) /12
growth = 0.0
for i in 1..@months.to_i
	if (i == 1)
		# need to add minimum RIs to 1st month's cost
		month1 = (monthly*@month_start_percentage.to_f)+ minimum_ri_month1
		%><td><%= month1 %><hr /><%= count_ri_month1 %></td><%
		growth = @month_start_percentage.to_f
		
	else
		test = growth +(growth* @month_growth_percentage.to_f)
		test >= 1 ?  growth = 1 : growth = test
		
		%><td><%= monthly * growth %></td><%
	end
	puts "GROWTH #{growth}"
end
%>
</tr>
</table>
